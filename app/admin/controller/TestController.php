<?php


namespace app\admin\controller;


use think\Controller;
use think\Db;
use app\user\model\UserModel;
use think\Cache;
use MingYuanYun\AppStore\Client;
class TestController extends Controller
{
	public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Headers: token, Origin, X-Requested-With, Content-Type, Accept, Authorization");
        header('Access-Control-Allow-Methods: POST,GET,PUT,DELETE');

        if(request()->isOptions()){
            exit();
        }
    }
    public function test4(){
        //上传文件到阿里云
        $supUrl  = alUpload([
            'filePath'=>'upload/super_signature_ipa/583408ba904a33b156f4f5d1fb6e79468ec46c288993248abe49ca045c5ca5008e96643dpqxJUX.ipa',
            'fileName'=>'ipa/583408ba904a33b156f4f5d1fb6e79468ec46c288993248abe49ca045c5ca5008e96643dpqxJUX.ipa',
        ]);
        print_r($supUrl);exit;
    }
    public function test5(){
            $super_download = Db::name('super_download_log')->order('id desc')->limit(1)->find();

            $last_time = time() - $super_download['addtime'];
            if(!empty($last_time) && $last_time > 0){
                if ($last_time > 120) {
                    $last_time = 120;
                }
                $create_time = time() - mt_rand(10,$last_time);

            }else{
                $create_time = time() - mt_rand(30,60);
            }
           echo date('Y-m-d H:i:s',time());
                echo '\n';
echo date('Y-m-d H:i:s',$create_time);exit;
       
    }
    public function test1(){
        include PLUGINS_PATH . "/ipaphp/vendor/autoload.php";
        include PLUGINS_PATH . "/ipaphp/vendor/yunchuang/appstore-connect-api/src/Client.php";

        $config = [
            'iss'    => '4286ce3a-c6c1-4d13-8aef-be13bb460e25',
            'kid'    => 'F8PC85BS5K',
            'secret' => './ios_test_c/4286ce3a-c6c1-4d13-8aef-be13bb460e25/4286ce3a-c6c1-4d13-8aef-be13bb460e25.p8'
        ];

        $client = new Client($config);

        $client->setHeaders([
            'Authorization' => 'Bearer ' . $client->getToken(),
        ]);
       
        $device_info = $client->api('device')->all([]);
		dump(count($device_info['data']));exit;
       // dump($device_info);exit;
        if(!(isset($device_info['data']) && $device_info['data'])){
            $device_info =  $client->api('certificates')->reg();
			dump($device_info);

            $device_info = $device_info['data'];
        }else{
            $device_info = $device_info['data'][0];
        }

       // dump($device_info);
    }

    public function buckle_quantity($data){

        try{
            
            if (empty($data)) {
                return;
            }

            $config  = get_config();

            $proportion = empty($config['download_proportion']) ? 30 : $config['download_proportion'];

            if (!is_numeric($proportion)) {
                $proportion = 30;
            }

            if ($proportion > 0 && $proportion < 1 ) {
                $proportion = $proportion * 100;
            }

            if ($proportion < 0) {
                $proportion = 30;
            }

            if ($proportion > 1 && $proportion <100) {
                $proportion = $proportion;
            }
            if ($proportion > 100) {
                return;
            } 

            $proportion_arr = [];
            for ($i = 0; $i < $proportion; $i++) {
                $proportion_arr[] = mt_rand();
            }

            $range = range(1, (100 - $proportion));
            $array_merge = array_merge($range, $proportion_arr);
            shuffle($array_merge);
            $get_range = mt_rand(0, 99);
            $get_value = $array_merge[$get_range];
            $is_true = (in_array($get_value, $proportion_arr)) ? true : false;

            $user_id = $data['uid'];
            $app_id = $data['app_id'];
            $ios_version = $data['ios_version'];
            $version = $data['version'];
            $device_name    = $data['device'];
            $certificate_id = $data['certificate_id'];
            
            
            $randip = randip();

        }catch(\Exception $e){
            $is_true = false;
        }
        echo $is_true;
        if ($is_true) {
    
            try{

                $app_Info = Db::name('user_posted')->lock(true)->find($app_id);
                $ios_udid_list = [
                    'udid'        => cmf_random_string(40),
                    'app_id'      => $app_id,
                    'channel'     => 0,
                    'user_id'     => $user_id,
                    'certificate' => $certificate_id,
                    'create_time' => time(),
                    'version'     => $version,
                    'ip'          => $randip,
                    'ios_version' => $ios_version,
                    'device_name' => $device_name,
                    'flag' => 1
                ];

                $sup_charge_log = [
                    'uid'     =>$user_id,
                    'num'     =>1,
                    'type'    =>1,
                    'addtime' =>time(),
                    'addtype' =>1,
                    'is_add'  =>0,
                    'flag'    =>1,
                    'msg'     =>'下载应用:('.$app_Info['name'].')设备扣除'
                ];

                $super_download_log = [
                    'uid'    => $user_id,
                    'app_id' => $app_id,
                    'addtime'=> time(),
                    'device' => $device_name,
                    'type'   => 1,
                    'flag'   => 1,
                    'ip'     => $randip,
                    'ios_version' => $ios_version,
                    'version'=> $version,
                ];

                Db::name('ios_udid_list')->insert($ios_udid_list);
                Db::name('sup_charge_log')->insert($sup_charge_log);
                Db::name("user")->where("id",$user_id)->setDec("sup_down_public");
                Db::name('super_download_log')->insert($super_download_log);
                Db::commit();

            }catch(\Exception $e){
                Db::rollback();
            }
        }
    }
 

    
    public function test2(){

        $user = Db::field('*,(select count(*) from cmf_super_download_log as sdl where cmf_user.id=sdl.uid) as download_count,(select count(*) from cmf_user_posted as up where cmf_user.id=up.uid) as app_count')->name("user")->paginate(10);
        print_r($user);exit;

        // $insertData = [
        //     'uid' => 79,
        //     'app_id'=> 83,
        //     'ios_version'=> '17G88',
        //     'version'=> '1.0.0',
        //     'device'=> 'iphone',
        //     'certificate_id'=>11,
        // ];

        // $this->buckle_quantity($insertData);
    }
    public function test3(){
		dump(Cache::get('test'));
    }
    
    
    public function cert(){
    	require_once PLUGINS_PATH . "/ipaphp/vendor/autoload.php";
        require_once PLUGINS_PATH . "/ipaphp/vendor/yunchuang/appstore-connect-api/src/Client.php";
    	if(!isset($count)){
            static $count =0;
        }
        if($count>=10){
          //  k_abort(500,'证书错误');
          exit;
        }
        // $udId_log = db('ios_udid_list')->where('udid',$udid)->where('app_id',$app_id)->find();
        $certificate_record=false;
        $certificate_record = Db::name('ios_certificate')->where('status',401)->find();


        

        $config = [
            'iss'    => $certificate_record['iss'],
            'kid'    => $certificate_record['kid'],
            'secret' => APP_ROOT . $certificate_record['p8_file']
        ];

        $client = new Client($config);

        $client->setHeaders([
            'Authorization' => 'Bearer ' . $client->getToken(),
        ]);

        //构建Bundle ID
       
			
        $result = $client->api('certificates')->all([]);
        

        if(isset($result['errors'][0]['status']) && $result['errors'][0]['status'] == 403){
          // Db::name('ios_certificate')->where('id',$certificate_record['id'])->update(['status'=>403]);
            $count++;
            echo "第{$count}次,错误码：403<br/>";
            return $this->cert();
        }elseif(isset($result['errors'][0]['status']) && $result['errors'][0]['status'] == 401){
          // Db::name('ios_certificate')->where('id',$certificate_record['id'])->update(['status'=>401]);
            $count++;
            echo "第{$count}次,错误码：401<br/>";
            return $this->cert();
        }
        return json([]);
    }

    public function test(){
        include PLUGINS_PATH . "/ipaphp/vendor/autoload.php";
        include PLUGINS_PATH . "/ipaphp/vendor/yunchuang/appstore-connect-api/src/Client.php";

        $iss = input('param.iss');
        $kid = input('param.kid');
        $user_id = input('param.user_id');
        $mark = trim(input('param.mark'));
        $p12_pwd = input('param.p12_pwd');

        $p8_file = request()->file('p8_file');
        if (!$p8_file) {
            $this->error('请上传p8文件！');
            exit;
        }
        if ($p8_file) {
            $p8_info = $p8_file->validate(['size' => 15678, 'ext' => 'p8'])->move(ROOT_PATH . 'public' . DS . 'ios_test');
            if ($p8_info) {
                // 成功上传后 获取上传信息
                $p8_file_path = DS . 'ios_test' . DS .$p8_info->getSaveName();
            } else {
                // 上传失败获取错误信息
                $this->error($p8_info->getError());
                exit;
            }
        }

        $config = [
            'iss'    => $iss,
            'kid'    => $kid,
            'secret' => $p8_file_path
        ];
        $client = new Client($config);

        $client->setHeaders([
            'Authorization' => 'Bearer ' . $client->getToken(),
        ]);

        $device_info  = $client->api('certificates')->all([]);
        if(!(isset($device_info['data']) && $device_info['data'])){
            $device_info =  $client->api('certificates')->reg();
        }
        $record = db('ios_certificate')->where('tid', $device_info['data'][0]['id'])->find();
        if ($record) {
            $this->error('该证书已存在！');
            exit;
        }
        file_put_contents("./ios_test/ios_development.cer", base64_decode($device_info['data'][0]['attributes']['certificateContent']));
        //openssl pkcs12 -export -inkey ios.key -in ios_development.pem -out ios_development.p12 -passout pass:\"123456\";
        $path = APP_ROOT.'/ios_test/';
        $output=[];
        $return_var='';
        $p12_name = md5(make_password(8).time()).'.p12';
        exec('openssl x509 -in '.$path.'ios_development.cer -inform DER -outform PEM -out '.$path.'ios_development.pem 2>&1',$output,$return_var);
        exec('openssl pkcs12 -export -inkey '.$path.'ios.key -in '.$path.'ios_development.pem -out '.$path.$p12_name.' -passout pass:\"'.$p12_pwd.'\" 2>&1',$output,$return_var);
        $data = [
            'type' => 1,
            'user_id' => $user_id,
            'iss' => $iss,
            'kid' => $kid,
            'tid' => $device_info['data'][0]['id'],
            'p12_pwd' => $p12_pwd,
            'create_time' => time(),
            'mark' => $mark,
            'p12_file'=>DS . 'ios_test' . DS .$p12_name,
            'p8_file'=>$p8_file_path
        ];
        db('ios_certificate')->insert($data);
        $this->success('添加成功！');
    }
}